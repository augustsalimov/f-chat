version: '3'
services:
  redis:
    image: redis/redis-stack
    container_name: redis
    env_file:
      - .env
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${REDIS_HOST}:${REDIS_PORT}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - cache:/data
    networks:
      - api_network
    expose:
      - "${REDIS_PORT}"
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: on-failure
    
  postgres:
    image: postgres:13.3-alpine
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - api_network
    ports:
      - ${DB_PORT}:${DB_PORT}
    restart: on-failure

  app:
    build: ./app
    container_name: app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    ports:
      - "${APP_PORT}:${APP_PORT}"
    entrypoint: [ "bash", "./entrypoint.sh" ]
    restart: on-failure

  nginx:
    image: nginx:1.19.8-alpine
    container_name: 'nginx'
    depends_on:
      - app
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    volumes:
      - static_data:/var/www/html/static
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/site.conf:/etc/nginx/conf.d/site.conf:ro
    restart: on-failure

networks:
  api_network:
    driver: bridge
      
volumes:
  cache:
  postgres_data:
  static_data: